#!/usr/bin/env node
var program = require('commander');
var NCMB = require("ncmb");
var common = require('../lib/common');
var path = require('path');
var fs = require('fs');
var parse = require('csv-parse');

ncmb = null;

program
  .version('0.0.1')
  .option('-a, --application_key [application_key]', 'Your application Key', '')
  .option('-c, --client_key [client_key]', 'Your client key', '')
  .option('-b, --boolean [true or false]', 'Convert boolean. "True" changes to true and "False" changes to false. Case is not sensitive.', false)
  .option('-d, --date [true or false]', 'Convert date. Convert similar date format string to date object like YYYY-mm-ddTHH:MM:SS+09:00', false)
  .option('--object [true or false]', 'Convert object. Value should be parseable for json.', false)
  .option('--classname [className]', 'Import class name. Default is file name eg. User.json -> User.')
  .option('-l, --location [true or false]', 'Convert location. Similar location format string converts to location like 99.99999..,999.99999.. ', false)
  .parse(process.argv);

if (typeof program.args[0] == "undefined") {
  console.log("CSV file path is require.");
  process.exit(1);
}
var classname = typeof program.classname == 'undefined' ? path.basename(program.args[0], path.extname(program.args[0])) : program.classname;

common.load_config(program.application_key, program.client_key)
  .then(function(json) {
    main(json.application_key, json.client_key);
  },
  function(error) {
    console.log(error);
    process.exit(1);
  }
);

function main(application_key, client_key) {
  ncmb = new NCMB(application_key, client_key);
  common.csv2json(program.args[0], program).then(function(results) {
    for (i in results) {
      var className = ncmb.DataStore(classname);
      var params = results[i];
      fetch_or_create(className, params, i)
        .then(function(obj) {
        })
    }
  })
}

function fetch_or_create(className, params, i) {
  var item = new className;
  return new Promise(function(resolve, reject) {
    for (var k in params) {
      className = className.equalTo(k, params[k])
    }
    className.fetch()
      .then(function(obj) {
        if (obj.objectId) {
          // データあり
          console.log("Row #"+(parseInt(i)+1) + ", data exist. objectId is "+obj.objectId)
          return resolve(obj);
        }
        for (var k in params) {
          if (['objectId', 'createDate', 'updateDate', 'acl'].indexOf(k) > -1) {
            continue;
          }
          item.set(k, params[k]);
        }
        item.save()
          .then(function(obj) {
            console.log("Row #"+(parseInt(i)+1) + ", data saved. objectId is "+obj.objectId)
            return resolve(obj);
          })
          .catch(function(err) {
            console.error(err);
            reject(err)
          })
      })
      .catch(function(err) {
        reject(err);
      })
  });
}